blueprint:
  name: View Assist - Alarm management
  description: Ask Assist to set an alarm and turn it off (View Assist alarmmanagement
    v 1.0.0)
  domain: automation  
  input:
    command_setalarm:
      name: Command Text Set alarm
      description: The phrase you want to use to trigger adding an alarm
      default: Set an alarm for {time}
    command_turnoff:
      name: Command Text Turn off alarm
      description: The phrase you want to use to trigger stopping the ringing alarm
      default: Turn off alarm
    command_remove:
      name: Command Text Remove alarm
      description: The phrase you want to use to trigger removing a scheduled alarm
        (not yet implemented)
      default: Cancel {time} alarm
    calendar_entity:
      name: Calendar Entity
      description: The Home Assistant calendar to use for storing alarms (example
        calendar.viewassist)
      selector:
        entity:
          filter:
          - domain:
            - calendar
          multiple: false
      default: calendar.viewassist
    alarmsound_path:
      name: Alarm sound path
      description: The path to a sound file to use as the attention device when the
        alarm is ringing
      default: http://192.168.0.25:8123/local/viewassist/alarm1.mp3            
    view:
      name: View
      description: The View Assist dashboard view to use for alarm 
      default: "/dashboard-viewassist/alarm"
    group_entity:
      name: Group Entity
      description: The group that holds the list of View Assist satellites(example
        group.viewassist_satellites)
      selector:
        entity:
          filter:
          - domain:
            - group
          multiple: false
      default: group.viewassist_satellites            
trigger:
  - platform: conversation
    command: !input command_setalarm
    id: setalarm
  - platform: state
    entity_id: !input calendar_entity
    to: "on"
    id: ringalarm
  - platform: conversation
    command: !input command_turnoff
    id: turnoffalarm
condition: []
action:
  - variables:
      group_entity: !input group_entity
      calendar_entity: !input calendar_entity
      alarmsound_path: !input alarmsound_path
      view: !input view
  - choose:
      - conditions:
          - condition: trigger
            id:
              - setalarm
        sequence:
          - set_conversation_response: Alarm set for {{trigger.slots.time}}
          - variables:
              target_satellite_device: |-
                {% for sat in expand(group_entity) %}
                  {% if (device_id(sat.attributes.mic_device)  == trigger.device_id) or (device_id(sat.attributes.display_device)  == trigger.device_id) %}
                    {{ sat.entity_id }}
                  {% endif %}
                {% endfor %}
              target_display_device: >-
                {{ device_id(state_attr(target_satellite_device,
                'display_device')) }}
              target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device') }}"
            enabled: true
          - target:
              entity_id: "{{ calendar_entity }}"
            data:
              summary: ASSISTALARM,{{target_satellite_device}}
              start_date_time: >-
                {{strptime(today_at().date() ~ ' ' ~ trigger.slots.time,
                '%Y-%m-%d %I:%M %p')}}
              end_date_time: >-
                {{strptime(today_at().date() ~ ' ' ~ trigger.slots.time,
                '%Y-%m-%d %I:%M %p') + timedelta(minutes=1)}}
            enabled: true
            action: calendar.create_event
      - conditions:
          - condition: trigger
            id:
              - ringalarm
        sequence:
          - variables:
              target_satellite_device: "{{state_attr(calendar_entity,'message').split(',')[1]}}"
              target_display_device: >-
                {{ device_id (state_attr(target_satellite_device,
                'display_device')) }}
              target_mediaplayer_device: "{{state_attr(target_satellite_device, 'mediaplayer_device')}}"
            enabled: true
          - data:
              entity_id: "{{ target_satellite_device }}"
              alarm: active
              mode: hold
            action: python_script.set_state
          - data:
              path: "{{ view }}"
            target:
              device_id: "{{target_display_device}}"
            action: browser_mod.navigate
          - repeat:
              sequence:
                - data:
                    media_content_id: "{{ alarmsound_path }}"
                    media_content_type: music
                  target:
                    entity_id: "{{ target_mediaplayer_device }}"
                  enabled: true
                  action: media_player.play_media
                - delay:
                    seconds: 2
                - wait_template: "{{ states(target_mediaplayer_device) == 'idle'}}"
                  continue_on_timeout: true
                  enabled: true
              while:
                - condition: template
                  value_template: "{{state_attr(target_satellite_device,'alarm') == 'active'}}"
      - conditions:
          - condition: trigger
            id:
              - turnoffalarm
        sequence:
          - variables:
              target_satellite_device: "{{state_attr(calendar_entity,'message').split(',')[1]}}"
              target_display_device: >-
                {{ device_id (state_attr(target_satellite_device,
                'display_device')) }}
              target_mediaplayer_device: "{{state_attr(target_satellite_device, 'mediaplayer_device')}}"
              target_timer_device: "{{ state_attr(target_satellite_device, 'timer') }}"
            enabled: true
          - data:
              entity_id: "{{ target_satellite_device }}"
              alarm: idle
              mode: normal
            action: python_script.set_state
          - action: timer.finish
            target:
              entity_id: "{{ target_timer_device }}"
            data: {}
          - set_conversation_response: ""
mode: parallel
