alias: View Assist - Timer
description: ""
trigger:
  - platform: conversation
    command:
      - set a timer for {duration} seconds
    id: settimer
  - platform: event
    event_type: viewassist
    id: timerevent
condition: []
action:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - settimer
        sequence:
          - variables:
              duration: "{{ trigger.slots.duration | int }}"
              end_time: >-
                {{ (now() + timedelta(seconds=duration)).strftime('%Y-%m-%d
                %H:%M:%S') }}
              group_entity: group.viewassist_satellites
              target_satellite_device: |-
                {% for sat in expand(group_entity) %}
                  {% if (device_id(sat.attributes.mic_device)  == trigger.device_id) or (device_id(sat.attributes.display_device)  == trigger.device_id) %}
                    {{ sat.entity_id }}
                  {% endif %}
                {% endfor %}
              target_display_device: >-
                {{ device_id(state_attr(target_satellite_device,
                'display_device')) }}
              target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device') }}"
          - set_conversation_response: Timer set for {{ duration }} seconds
          - data:
              event_name: viewassist
              event_data:
                target_satellite_device: "{{ target_satellite_device }}"
                target_mediaplayer_device: "{{ target_mediaplayer_device }}"
                timer_name: VA test
              target_time: "{{ end_time }}"
            action: pyscript.schedule_event_at_time
      - conditions:
          - condition: trigger
            id:
              - timerevent
        sequence:
          - action: tts.google_translate_say
            metadata: {}
            data:
              cache: false
              message: Your timer has finished
              entity_id: "{{ trigger.event.data.target_mediaplayer_device }}"
mode: parallel
